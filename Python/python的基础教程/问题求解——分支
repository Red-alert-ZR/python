'''
##  1  ##
相关知识
　　本关要用到 if-else 分支，该分支有时候可以简写。具体来说，对于如下形式的分支结构：  

if 条件表达式:  
    变量 = 表达式1  
else:  
    变量 = 表达式2
　　可简写成一行：  

变量 = 表达式1 if 条件表达式 else 表达式2  

表示如果条件表达式成立，则将表达式 1的计算结果赋给变量，否则将表达式 2的计算结果赋给变量。  
例如求绝对值程序：  

x = eval(input('x='))  
if x>0:  
    a = x  
else:  
    a = -x  
print('|x|=', a)
'''


n = eval(input()) #获取n的值
########## Begin ##########
if n % 2 == 1:
    an = (n**2 - 1) / 2
else:
    an = (n**2) / 2

########## End ##########
print(int(an))    #打印大衍数列第n项的值an

'''
##  2　##
　本关涉及取出一个浮点数的整数和小数部分，下面是一种方法：  

x = 1.625  
y = int(x) # x的整数部分  
z = x - y  # x的小数部分  
print(y, z)  

四舍五入”是一种精确度的计数保留法。例如，将一个小数化为整数时，如果小数部分小于 0.5，则舍去小数部分，只保留整数部分，否则将小数部分视为 1，加入整数部分，如 4.4 化为 4、4.5 化为 5。
　　但在某些场合，将小数化整时，“舍” “入”的界限要取“0.5”以外的其他值，例如 0.6，即小数部分小于 0.6 时“舍”、大于等于 0.6 时“入”，如 4.5 化为 4，4.6 化为 5，这种方法可以称为“五舍六入”。
　　本关任务是利用“五舍六入”方法将小数化为整数。

'''
x = eval(input())#获取小数x
########## Begin ##########
x_int = int(x)
a = x-x_int
if a >= 0.6:
    x_int = x_int + 1
else:
    x_int = x_int 
########## End ##########
print(x_int)     #打印x对应的整数


'''
##  3  ##
相关知识
　　当要对多个条件进行判断时，可以使用 if-elif-else 分支，完整的语法结构如下：  

if 条件表达式1:  
    语句块1  
elif 条件表达式2:  
    语句块2  
……  
elif 条件表达式n:  
    语句块n  
else:  
    语句块n+1  
　　其中，elif 是 else if 的缩写，这也决定了 if-elif-else 分支的执行过程：
　　1）从上往下依次判断条件，若条件表达式 i成立，则执行语句块 i，若 n 个条件均不成立，则执行语句块 n+1；  
　　2）当某个条件成立并执行完对应语句块后，该结构即执行结束，不再对后面的条件进行判断。
　　所以，语句块 1~语句块 n+1中，有且仅有一个语句块会被执行，即最先成立的条件对应的语句块。例如，条件表达式 1成立，则执行语句块 1，执行完后，直接跳过elif 条件表达式 2~语句块 n+1部分，不再对这部分的条件进行判断，即使有条件能够成立。
  因此，if-elif-else 结构常常用于“多个条件中最多有一个条件成立”的情况。例如，将考试分数（0~100）转换为等级（A~E），程序如下：  

score=75  
if 90<=score<=100:  #[90, 100]为A  
    print('A')  
elif 80<=score<90:  #[80, 90)为B  
    print('B')  
elif 70<=score<80:  #[70, 80)为C  
    print('C')  
elif 60<=score<70:  #[60, 70)为D  
    print('D')  
elif 0<=score<60:   #[0, 60)为E  
    print('E')  
else:           #100分以上，0分以下  
    print('输入错误')  
　　这个例题也可以使用 if 分支完成：  

score=75  
if 90<=score<=100: #[90, 100]为A  
    print('A')  
if 80<=score<90:   #[80, 90)为B  
    print('B')  
if 70<=score<80:   #[70, 80)为C  
    print('C')  
if 60<=score<70:   #[60, 70)为D  
    print('D')  
if 0<=score<60 :   #[0, 60)为E  
    print('E')  
if score>100 or score<0: #100分以上，0分以下  
    print('输入错误')  
　　但这两个程序虽然功能相同，但在结构和执行过程上是有区别的，前者第 2~13 行对应一个 if-elif-else 分支，而后者第 2~13 行对应了 6 个 if 分支，其执行过程也不一样，如下图：  



背景
　　地球诞生至今已有 40 多亿年，用历法描述如此漫长的时间非常不方便，为此，科学家基于地球的地质事件提出了地质纪年方法，用以描述地球诞生至今的各个阶段，被广泛应用于地质学、地球科学、古生物学等领域。
　　地质纪年是一个层次结构，其时间单位从大到小分为：宙、代、纪、世、期、时，如广为人知的“侏罗纪”是地质纪年中的一个“纪”，它是“显生宙”“中生代”下面的第二个“纪”，它下面又划分为“早侏罗世”“中侏罗世”“晚侏罗世”三个“世”。

任务
　　在地质纪年中，最大的时间单位是“宙”，从近到远共有以下四个“宙”：

宙	距今时间（亿年）
显生宙	[0, 5.7)
元古宙	[5.7, 25)
太古宙	[25, 38)
冥古宙	[38, 46]
　　本关任务是根据给定的距今时间，判断该年属于哪个宙。



'''

y = eval(input()) #距今时间（亿年）
########## Begin ##########
if 0<=y<5.7:
    z = '显生宙' 
elif 5.7<=y<25:
    z = '元古宙'
elif 25<=y<38:
    z = '太古宙'
elif 38<=y<=46:
    z = '冥古宙'
else:
    z = '输入错误'
########## End ##########
print(z)          #打印结果


















